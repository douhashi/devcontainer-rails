#!/bin/bash

# Docker Compose Production環境の初期化スクリプト
# 初回セットアップ時に必要な設定を行う

set -e

echo "========================================="
echo "Lofi BGM - Docker Production Setup"
echo "========================================="
echo ""

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. 環境変数のチェック
check_environment() {
    echo "Checking for required environment variables..."
    
    if [ -n "$RAILS_PRODUCTION_KEY" ]; then
        echo -e "${GREEN}✓${NC} RAILS_PRODUCTION_KEY found"
        return 0
    else
        echo -e "${RED}✗${NC} RAILS_PRODUCTION_KEY not found"
        echo ""
        echo -e "${YELLOW}Action required:${NC}"
        echo "Please set RAILS_PRODUCTION_KEY environment variable"
        echo ""
        echo "If using direnv:"
        echo "  1. Ensure .envrc is loaded: direnv allow"
        echo "  2. Check variable: echo \$RAILS_PRODUCTION_KEY"
        echo ""
        return 1
    fi
}

# 2. 環境変数ファイルの生成
create_env_file() {
    echo "Creating environment configuration..."
    
    if [ -f ".env.production" ]; then
        echo -e "${YELLOW}!${NC} .env.production already exists. Skipping..."
        return 0
    fi
    
    cat > .env.production <<EOF
# Generated by init-production.sh
# Please update these values according to your environment

# Rails Configuration
RAILS_PRODUCTION_KEY=${RAILS_PRODUCTION_KEY:-YOUR_MASTER_KEY_HERE}
SECRET_KEY_BASE=$(openssl rand -hex 64)

# External Port (change if 3000 is already in use)
EXTERNAL_PORT=3000

# API Keys (optional - add if needed)
PRODUCTION_KIE_API_KEY=${PRODUCTION_KIE_API_KEY:-}
YOUTUBE_CLIENT_ID=
YOUTUBE_CLIENT_SECRET=
YOUTUBE_API_KEY=

# Performance Tuning
RAILS_MAX_THREADS=5
WEB_CONCURRENCY=2
EOF
    
    echo -e "${GREEN}✓${NC} Created .env.production"
    echo -e "${YELLOW}!${NC} Please update API keys in .env.production if needed"
}

# 3. Docker Composeの設定確認
check_docker_compose() {
    echo "Checking Docker Compose installation..."
    
    if command -v docker compose &> /dev/null; then
        echo -e "${GREEN}✓${NC} Docker Compose V2 found"
        DOCKER_COMPOSE="docker compose"
    elif command -v docker-compose &> /dev/null; then
        echo -e "${GREEN}✓${NC} Docker Compose V1 found"
        DOCKER_COMPOSE="docker-compose"
    else
        echo -e "${RED}✗${NC} Docker Compose not found"
        echo "Please install Docker Desktop or Docker Compose"
        exit 1
    fi
}

# 4. ディレクトリの準備
prepare_directories() {
    echo "Preparing directories..."
    
    mkdir -p storage/db storage/active_storage log tmp/pids tmp/cache tmp/sockets
    echo -e "${GREEN}✓${NC} Directories created"
}

# 5. イメージのビルド
build_images() {
    echo ""
    echo "Building Docker images..."
    echo "This may take several minutes on first run..."
    
    $DOCKER_COMPOSE -f docker-compose.production.yml build
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓${NC} Docker images built successfully"
    else
        echo -e "${RED}✗${NC} Failed to build Docker images"
        exit 1
    fi
}

# 6. 初回起動とデータベース初期化
initialize_database() {
    echo ""
    echo "Initializing database..."
    
    # データベースの初期化を実行
    $DOCKER_COMPOSE -f docker-compose.production.yml run --rm web bundle exec rails db:create db:migrate db:seed
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓${NC} Database initialized successfully"
    else
        echo -e "${RED}✗${NC} Failed to initialize database"
        exit 1
    fi
}

# メイン処理
main() {
    echo "Starting production environment setup..."
    echo ""
    
    # 各ステップを実行
    check_docker_compose
    
    if ! check_environment; then
        echo -e "${RED}Setup cannot continue without RAILS_PRODUCTION_KEY${NC}"
        exit 1
    fi
    
    create_env_file
    prepare_directories
    build_images
    initialize_database
    
    echo ""
    echo "========================================="
    echo -e "${GREEN}Setup completed successfully!${NC}"
    echo "========================================="
    echo ""
    echo "To start the application:"
    echo "  $DOCKER_COMPOSE -f docker-compose.production.yml up -d"
    echo ""
    echo "To view logs:"
    echo "  $DOCKER_COMPOSE -f docker-compose.production.yml logs -f"
    echo ""
    echo "To stop the application:"
    echo "  $DOCKER_COMPOSE -f docker-compose.production.yml down"
    echo ""
    echo "Access the application at: http://localhost:3000"
}

# スクリプト実行
main